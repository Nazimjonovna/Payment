from django.conf import settings


def get_params(params: dict) -> dict:
    """
    Use this function to get the parameters from the payme.
    """
    account: dict = params.get("account")

    clean_params: dict = {}
    clean_params["_id"] = params.get("id")
    clean_params["time"] = params.get("time")
    clean_params["amount"] = params.get("amount")
    clean_params["reason"] = params.get("reason")

    # Get statement method params
    clean_params["start_date"] = params.get("from")
    clean_params["end_date"] = params.get("to")

    if account is not None:
        account_name: str = settings.PAYME.get("PAYME_ACCOUNT")
        if account_name == "user_id":  # Check if the account name is user_id
            clean_params["user_id"] = account["user_id"]
        else:
            raise KeyError(f"{account_name} not found in account.")

    return clean_params


# def get_params(params: dict) -> dict:
#     """
#     Use this function to get the parameters from the payme.
#     """
#     account: dict = params.get("account")

#     clean_params: dict = {}
#     clean_params["_id"] = params.get("id")
#     clean_params["time"] = params.get("time")
#     clean_params["amount"] = params.get("amount")
#     clean_params["reason"] = params.get("reason")

#     # get statement method params
#     clean_params["start_date"] = params.get("from")
#     clean_params["end_date"] = params.get("to")

#     if account is not None:
#         account_name: str = settings.PAYME.get("PAYME_ACCOUNT")
#         print("Account dictionary:", account)  # Debugging line
#         print("Expected key:", account_name)  # Debugging line

#         clean_params["user_id"] = account.get(account_name)  # Change order_id to user_id

#         if clean_params["user_id"] is None:
#             print(f"Warning: '{account_name}' not found in account.")  # Log a warning
#             clean_params["user_id"] = ""  # Or some default value

#     return clean_params


# def get_params(params: dict) -> dict:
#     """
#     Use this function to get the parameters from the payme.
#     """
#     account: dict = params.get("account")

#     clean_params: dict = {}
#     clean_params["_id"] = params.get("id")
#     clean_params["time"] = params.get("time")
#     clean_params["amount"] = params.get("amount")
#     clean_params["reason"] = params.get("reason")

#     # get statement method params
#     clean_params["start_date"] = params.get("from")
#     clean_params["end_date"] = params.get("to")

#     if account is not None:
#         account_name: str = settings.PAYME.get("PAYME_ACCOUNT")
#         clean_params["order_id"] = account[account_name]

#     return clean_params
